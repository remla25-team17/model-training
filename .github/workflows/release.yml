name: Build and (Pre)Release

on:
  push:
    branches:
      - main
      - develop/**

permissions:
  contents: write

jobs:
  lint:
    name: Linter
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python 3.12
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"

      - name: Install dependencies
        run: pip install -r requirements.txt

      - name: Install custom rules
        run: pip install -e .
      - name: pylint
        run: |
          pylint --load-plugins=lint.custom_rules ./sentiment_model_training/ > pylint-report.txt || true
          SCORE=$(grep "rated at" pylint-report.txt | sed -E 's/.*rated at ([0-9\.]+)\/10.*/\1/')
          anybadge -l pylint -v "$SCORE" -f pylint.svg --overwrite 2=red 4=orange 8=yellow 10=green
      - name: Commit pylint badge
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          git add pylint.svg
          git commit -m "Add/update pylint badge"
          git pull
          git push
        continue-on-error: true
      - name: flake8
        run: flake8 ./sentiment_model_training/

  testing:
    name: Testing
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python 3.12
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"

      - name: Install dependencies
        run: pip install -r requirements.txt

      # - name: Run tests
      #   run: pytest ./sentiment_model_training/

      - name: Run coverage
        run: |
          coverage run --source=sentiment_model_training -m pytest
          rm -f coverage.txt
          coverage report -m > coverage.txt
          rm -f coverage.svg
          coverage-badge -o coverage.svg

      - name: Generate ML Test Score badge
        run: |
          pip install anybadge
          python generate_ml_test_badge.py

      - name: Commit badges
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          git add coverage.svg ml_test_score.svg metrics.json
          git commit -m "Add/update badges and metrics"
          git pull
          git push
        continue-on-error: true

  tag-release:
    name: Generate Release
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.gitversion.outputs.semVer }}

    steps:
      - name: Create GitHub App Token
        id: generate-token
        uses: actions/create-github-app-token@v1
        with:
          app-id: ${{ vars.APP_ID }}
          private-key: ${{ secrets.APP_PRIVATE_KEY }}

      - name: Checkout
        uses: actions/checkout@v4
        with:
          token: ${{ steps.generate-token.outputs.token }}
          persist-credentials: false
          fetch-depth: 0

      - name: Install GitVersion
        uses: gittools/actions/gitversion/setup@v3.2.1
        with:
          versionSpec: "5.12.0"

      - name: Run GitVersion
        id: gitversion
        uses: gittools/actions/gitversion/execute@v3.2.1
        with:
          useConfigFile: true

      - name: Create Release
        uses: softprops/action-gh-release@v2
        with:
          token: ${{ steps.generate-token.outputs.token }}
          tag_name: ${{ steps.gitversion.outputs.semVer }}
          name: Release ${{ steps.gitversion.outputs.semVer }}
          target_commitish: ${{ github.sha }}
          generate_release_notes: true
          prerelease: ${{ contains(steps.gitversion.outputs.semVer, '-') }}

  build:
    name: Build and Upload Artifacts
    runs-on: ubuntu-latest
    needs: tag-release
    env:
      version: ${{ needs.tag-release.outputs.version }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Create GitHub App Token
        id: generate-token
        uses: actions/create-github-app-token@v1
        with:
          app-id: ${{ vars.APP_ID }}
          private-key: ${{ secrets.APP_PRIVATE_KEY }}

      - name: Set up Python 3.12
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"

      - name: Install dependencies
        run: pip install -r requirements.txt

      - name: Inject version into pyproject.toml
        run: |
          sed -i "s/version = \"0.0.0\"/version = \"$version\"/" pyproject.toml

      - name: Get data
        run: python sentiment_model_training/modeling/get_data.py

      - name: Preprocess data
        run: python sentiment_model_training/modeling/preprocess.py

      - name: Train model
        run: python sentiment_model_training/modeling/train.py

      - name: Upload model
        uses: softprops/action-gh-release@v1
        with:
          token: ${{ steps.generate-token.outputs.token }}
          tag_name: ${{ env.version }}
          files: model/model.pkl

      - name: Upload bag of words
        uses: softprops/action-gh-release@v1
        with:
          token: ${{ steps.generate-token.outputs.token }}
          tag_name: ${{ env.version }}
          files: model/bag_of_words.pkl
